import (
	opentracing "github.com/opentracing/opentracing-go"
	_ext "github.com/opentracing/opentracing-go/ext"
	_log "github.com/opentracing/opentracing-go/log"
)

{{ $decorator := (printf "%sWithTracing" .Interface.Name) }}

// {{$decorator}} implements {{.Interface.Type}} interface instrumented with opentracing spans
type {{$decorator}} struct {
  {{.Interface.Type}}
  _instance string
}

// New{{$decorator}} returns {{$decorator}}
func New{{$decorator}} (base {{.Interface.Type}}, instance string) {{$decorator}} {
  return {{$decorator}} {
    {{.Interface.Name}}: base,
    _instance: instance,
  }
}

{{range $method := .Interface.Methods}}
  {{if $method.AcceptsContext}}
    // {{$method.Name}} implements {{$.Interface.Type}}
    func (_d {{$decorator}}) {{$method.Declaration}} {
      _span, ctx := opentracing.StartSpanFromContext(ctx, _d._instance + ".{{$.Interface.Type}}.{{$method.Name}}")
      {{- if $method.ReturnsError}}
        defer func() {
          if err != nil {
            _ext.Error.Set(_span, true)
            _span.LogFields(
              _log.String("event", "error"),
              _log.String("message", err.Error()),
            )
			    }
          _span.Finish()
        }()
      {{else}}
        defer _span.Finish()
      {{end}}
      {{$method.Pass (printf "_d.%s." $.Interface.Name) }}
    }
  {{end}}
{{end}}
